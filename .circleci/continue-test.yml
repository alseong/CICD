version: 2.1

parameters:
  run-react-tests:
    type: boolean
    default: false
  config-override:
    type: string
    default: "none"
  image-tag:
    type: string
    default: "current"
  test-conditional:
    type: boolean
    default: false

executors:
  node-executor:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project

jobs:
  debug-parameters:
    executor: node-executor
    steps:
      - run:
          name: Print pipeline parameters
          command: |
            echo "üîç run-react-tests parameter: << pipeline.parameters.run-react-tests >>"
            echo "üîç config-override parameter: << pipeline.parameters.config-override >>"
            echo "üîç image-tag parameter: << pipeline.parameters.image-tag >>"

  install-dependencies:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install npm dependencies
          command: |
            npm install
            echo "‚úÖ All dependencies installed!"
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules

  test-react-build:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Build React application
          command: |
            npm run build
            echo "‚úÖ React build successful"
      - store_artifacts:
          path: build
          destination: build-artifacts

  test-react-functionality:
    executor: node-executor
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run React tests
          command: |
            mkdir -p test-results
            find src -name "*.test.js" -o -name "*.test.jsx" | circleci tests run --split-by=timings --command "xargs -r -I {} npm test {} -- --coverage --watchAll=false --reporters=default --reporters=jest-junit"
            echo "‚úÖ React tests completed"
          environment:
            CI: true
            JEST_JUNIT_OUTPUT_DIR: test-results
            JEST_JUNIT_OUTPUT_NAME: jest-junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
          destination: coverage-report

  lint-react-code:
    executor: node-executor
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Lint React code
          command: |
            mkdir -p test-results/eslint lint-results
            # Split and lint JS/JSX files (each container writes to unique file)
            find src -name "*.js" -o -name "*.jsx" | circleci tests run --split-by=timings --command "xargs -r -I {} npx eslint {} --format junit --output-file test-results/eslint/results-${CIRCLE_NODE_INDEX}.xml"
            # Generate additional reports (only on container 0 to avoid conflicts)
            if [ "$CIRCLE_NODE_INDEX" = "0" ]; then
              npx eslint src/ --ext .js,.jsx --format html --output-file lint-results/eslint-report.html || echo "‚ö†Ô∏è  Linting issues found"
              npx eslint src/ --ext .js,.jsx --format json --output-file lint-results/eslint-report.json || echo "‚ö†Ô∏è  Linting issues found"
            fi
            echo "‚úÖ Code linting complete"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: lint-results
          destination: lint-reports
      - store_artifacts:
          path: test-results/eslint
          destination: eslint-xml

workflows:
  react-test-workflow:
    when: << pipeline.parameters.run-react-tests >>
    jobs:
      - debug-parameters
      - install-dependencies
      - test-react-build:
          requires:
            - install-dependencies
      - test-react-functionality:
          requires:
            - install-dependencies
      - lint-react-code:
          requires:
            - install-dependencies

  default-workflow:
    unless: << pipeline.parameters.run-react-tests >>
    jobs:
      - debug-parameters
      - install-dependencies 
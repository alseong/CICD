version: 2.1

# Add orbs for Docker and Kubernetes!
orbs:
  docker: circleci/docker@2.2.0
  kubernetes: circleci/kubernetes@1.3.1

parameters:
  run-react-tests:
    type: boolean
    default: false
  config-override:
    type: string
    default: "none"
  image-tag:
    type: string
    default: "current"
  test-conditional:
    type: boolean
    default: false

executors:
  node-executor:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project
  
  docker-executor:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project

jobs:
  debug-parameters:
    executor: node-executor
    steps:
      - run:
          name: Print pipeline parameters
          command: |
            echo "🔍 run-react-tests parameter: << pipeline.parameters.run-react-tests >>"
            echo "🔍 config-override parameter: << pipeline.parameters.config-override >>"
            echo "🔍 image-tag parameter: << pipeline.parameters.image-tag >>"

  install-dependencies:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install npm dependencies
          command: |
            npm install
            echo "✅ All dependencies installed!"
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules

  test-react-build:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Build React application
          command: |
            npm run build
            echo "✅ React build successful"
      - store_artifacts:
          path: build
          destination: build-artifacts

  test-react-functionality:
    executor: node-executor
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run React tests
          command: |
            mkdir -p test-results
            find src -name "*.test.js" -o -name "*.test.jsx" | circleci tests run --split-by=timings --command "xargs -r -I {} npm test {} -- --coverage --watchAll=false --reporters=default --reporters=jest-junit"
            echo "✅ React tests completed"
          environment:
            CI: true
            JEST_JUNIT_OUTPUT_DIR: test-results
            JEST_JUNIT_OUTPUT_NAME: jest-junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
          destination: coverage-report

  lint-react-code:
    executor: node-executor
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Lint React code
          command: |
            mkdir -p test-results/eslint lint-results
            # Split and lint JS/JSX files (each container writes to unique file)
            find src -name "*.js" -o -name "*.jsx" | circleci tests run --split-by=timings --command "xargs -r npx eslint --format junit --output-file test-results/eslint/results-${CIRCLE_NODE_INDEX}.xml"
            # Generate additional reports (only on container 0 to avoid conflicts)
            if [ "$CIRCLE_NODE_INDEX" = "0" ]; then
              npx eslint src/ --ext .js,.jsx --format html --output-file lint-results/eslint-report.html || echo "⚠️  Linting issues found"
              npx eslint src/ --ext .js,.jsx --format json --output-file lint-results/eslint-report.json || echo "⚠️  Linting issues found"
            fi
            echo "✅ Code linting complete"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: lint-results
          destination: lint-reports
      - store_artifacts:
          path: test-results/eslint
          destination: eslint-xml

  # Docker build and push job
  build-and-push-docker:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            echo "🐳 Building Docker image..."
            docker build -t minjun6251/calculator-app:${CIRCLE_SHA1} .
            docker tag minjun6251/calculator-app:${CIRCLE_SHA1} minjun6251/calculator-app:latest
            echo "✅ Docker image built successfully"
      - run:
          name: Login to Docker Hub
          command: |
            echo "🔐 Logging into Docker Hub..."
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
            echo "✅ Docker login successful"
      - run:
          name: Push Docker image
          command: |
            echo "🚀 Pushing Docker image..."
            docker push minjun6251/calculator-app:${CIRCLE_SHA1}
            docker push minjun6251/calculator-app:latest
            echo "✅ Docker image pushed successfully"

  # Render deployment job
  deploy-to-render:
    executor: docker-executor
    steps:
      - checkout
      - run:
          name: Plan deployment
          command: |
            echo "📝 Planning deployment to Render..."
            circleci run release plan \
              --environment-name=production \
              --component-name=calculator-app \
              --target-version=${CIRCLE_SHA1}
            echo "✅ Deployment planned in CircleCI"
      - run:
          name: Trigger Render deployment
          command: |
            echo "🚀 Triggering Render deployment..."
            curl -X POST "$RENDER_DEPLOY_HOOK_URL" \
              -H "Content-Type: application/json"
            echo "✅ Render deployment triggered"
      - run:
          name: Update deployment to running
          command: |
            echo "🔄 Updating deployment status to running..."
            circleci run release update --status=running
            echo "✅ Deployment status updated to running"
      - run:
          name: Validate deployment
          command: |
            echo "🔍 Validating deployment..."
            
            # Wait a bit for Render to start deployment
            sleep 10
            
            # Your Render app URL (update this to your actual URL)
            APP_URL="https://calculator-app-minjun.onrender.com"
            
            # Retry logic - try for up to 3 minutes
            MAX_ATTEMPTS=18
            ATTEMPT=1
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "🔄 Validation attempt $ATTEMPT/$MAX_ATTEMPTS..."
              
              # Check if app responds with 200 status
              HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo "000")
              
              if [ "$HTTP_STATUS" = "200" ]; then
                echo "✅ Deployment validation successful! App is responding."
                break
              else
                echo "⏳ App returned status $HTTP_STATUS, retrying in 10 seconds..."
                sleep 10
                ATTEMPT=$((ATTEMPT + 1))
              fi
            done
            
            # Final check
            if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
              echo "❌ Deployment validation failed after $MAX_ATTEMPTS attempts"
              echo "FAILURE_REASON='App failed to respond after deployment'" > failure_reason.env
              exit 1
            fi
      - run:
          name: Update deployment status - Success
          command: |
            echo "📝 Updating deployment status to success..."
            circleci run release update --status=SUCCESS
            echo "✅ Deployment marked as successful"
          when: on_success
      - run:
          name: Update deployment status - Failure
          command: |
            echo "📝 Updating deployment status to failure..."
            
            # Check if validation created a failure reason
            if [ -f failure_reason.env ]; then
              source failure_reason.env
              FAILURE_MSG="$FAILURE_REASON"
            else
              FAILURE_MSG="Render deployment failed"
            fi
            
            circleci run release update \
              --status=FAILED \
              --failure-reason="$FAILURE_MSG"
            echo "❌ Deployment marked as failed: $FAILURE_MSG"
          when: on_fail

  # Kubernetes deployment job
  deploy-to-kubernetes:
    executor: docker-executor
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: Create kubeconfig
          command: |
            echo "🔧 Setting up kubeconfig..."
            mkdir -p ~/.kube
            echo "$KUBECONFIG_DATA" | base64 -d > ~/.kube/config
            chmod 600 ~/.kube/config
            echo "✅ Kubeconfig created"
      - run:
          name: Verify cluster connection
          command: |
            echo "🔍 Verifying cluster connection..."
            kubectl cluster-info
            kubectl get nodes
            echo "✅ Cluster connection verified"
      - run:
          name: Update deployment image
          command: |
            echo "📝 Updating deployment image to use latest commit..."
            sed -i "s|image: minjun6251/calculator-app:latest|image: minjun6251/calculator-app:${CIRCLE_SHA1}|g" k8s/deployment.yaml
            echo "✅ Deployment image updated"
      - run:
          name: Verify k8s files
          command: |
            echo "🔧 Verifying k8s files..."
            echo "✅ Project ID already configured in k8s files"
      - run:
          name: Deploy to Kubernetes with CircleCI Deploys
          command: |
            echo "🚀 Deploying to Kubernetes..."
            kubectl apply -f k8s/
            echo "✅ Deployment applied"
      - run:
          name: Wait for deployment
          command: |
            echo "⏳ Waiting for deployment to be ready..."
            kubectl rollout status deployment/calculator-app --timeout=300s
            echo "✅ Deployment ready"
      - run:
          name: Create CircleCI deployment
          command: |
            echo "📝 Creating CircleCI deployment record..."
            # Create deployment record in CircleCI
            curl -X POST \
              -H "Circle-Token: ${CIRCLECI_TOKEN}" \
              -H "Content-Type: application/json" \
              "https://circleci.com/api/v2/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/deploy" \
              -d '{
                "revision": "'${CIRCLE_SHA1}'",
                "environment": "production",
                "component": "calculator-app",
                "status": "success"
              }'
            echo "✅ CircleCI deployment recorded"
      - run:
          name: Get deployment status
          command: |
            echo "📊 Deployment status:"
            kubectl get deployments,pods,services -l app=calculator-app
            echo "🔗 Service endpoint:"
            kubectl get service calculator-app-service

workflows:
  react-test-workflow:
    # when: << pipeline.parameters.run-react-tests >>
    jobs:
      - debug-parameters
      - install-dependencies
      - test-react-build:
          requires:
            - install-dependencies
      - test-react-functionality:
          requires:
            - install-dependencies
      - lint-react-code:
          requires:
            - install-dependencies
      # Docker build and push after tests pass
      - build-and-push-docker:
          requires:
            - test-react-build
            - test-react-functionality
            - lint-react-code
          filters:
            branches:
              only: main
      # Render deployment after Docker image is pushed
      - deploy-to-render:
          requires:
            - build-and-push-docker
          filters:
            branches:
              only: main
      # Kubernetes deployment after Docker image is pushed
      # - deploy-to-kubernetes:
      #     requires:
      #       - build-and-push-docker
      #     filters:
      #       branches:
      #         only: main

  default-workflow:
    unless: << pipeline.parameters.run-react-tests >>
    jobs:
      - debug-parameters
      - install-dependencies 
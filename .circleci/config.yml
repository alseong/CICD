version: 2.1

# This marks it as a setup configuration for dynamic config
setup: true

# Only need the continuation orb for this approach
orbs:
  continuation: circleci/continuation@2.0.0
  path-filtering: circleci/path-filtering@2.0.1
  team-config: << pipeline.parameters.config-override >>

# Keep your parameters - they'll be passed to the generated config
parameters:
  image-tag:
    type: string
    default: "current"
  test-conditional:
    type: boolean
    default: true
  config-override:
    type: string
    default: "https://raw.githubusercontent.com/mseong6251/YAML2/refs/heads/main/.circleci/team-config.yml"

executors:
  my-executor:
    docker:
      - image: cimg/base:<< pipeline.parameters.image-tag >>
    working_directory: /tmp

jobs:
  config-override-test:
    executor: my-executor
    steps:
      - run: |
          echo "Config override: << pipeline.parameters.config-override >>"
          
  generate-data:
    executor: my-executor
    steps:
      - run:
          name: Create workspace files
          command: |
            echo "🏗️  JOB 1: GENERATE-DATA"
            echo "========================="
            
            # Create workspace directory
            mkdir -p /tmp/workspace
            
            # Create initial files
            echo "Hello from generate-data job!" > /tmp/workspace/greeting.txt
            echo "Build: $CIRCLE_BUILD_NUM" > /tmp/workspace/build-info.txt
            echo "data-line-1" > /tmp/workspace/data.txt
            echo "data-line-2" >> /tmp/workspace/data.txt
            
            echo "📁 Files created in this job:"
            ls -la /tmp/workspace/
            echo ""
            echo "📄 File contents:"
            for file in /tmp/workspace/*; do
              echo "--- $(basename $file) ---"
              cat $file
              echo ""
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "*.txt"
            
  process-data:
    executor: my-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Process workspace files
          command: |
            echo "⚙️  JOB 2: PROCESS-DATA"
            echo "======================"
            
            echo "📁 Files received from previous job:"
            ls -la /tmp/workspace/
            echo ""
            
            echo "📄 Original file contents:"
            for file in /tmp/workspace/*.txt; do
              echo "--- $(basename $file) ---"
              cat $file
              echo ""
            done
            
            # Process the data
            echo "🔄 Processing data..."
            echo "Hello from process-data job!" > /tmp/workspace/processed-greeting.txt
            echo "Processed: $(date)" > /tmp/workspace/processing-log.txt
            
            # Modify existing data
            echo "data-line-3 (added by process-data)" >> /tmp/workspace/data.txt
            
            # Create summary file
            echo "Summary of processing:" > /tmp/workspace/summary.txt
            echo "- Modified data.txt" >> /tmp/workspace/summary.txt
            echo "- Created processed-greeting.txt" >> /tmp/workspace/summary.txt
            echo "- Created processing-log.txt" >> /tmp/workspace/summary.txt
            
            echo "📁 Files after processing:"
            ls -la /tmp/workspace/
            echo ""
            
            echo "📄 New/modified file contents:"
            for file in /tmp/workspace/processed-greeting.txt /tmp/workspace/processing-log.txt /tmp/workspace/summary.txt /tmp/workspace/data.txt; do
              if [ -f "$file" ]; then
                echo "--- $(basename $file) ---"
                cat $file
                echo ""
              fi
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "*.txt"
            
  publish-results:
    executor: my-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Show final workspace state
          command: |
            echo "📋 JOB 3: PUBLISH-RESULTS"
            echo "========================="
            
            echo "📁 Final workspace contents:"
            ls -la /tmp/workspace/
            echo ""
            
            echo "📄 All final file contents:"
            for file in /tmp/workspace/*.txt; do
              if [ -f "$file" ]; then
                echo "--- $(basename $file) ---"
                cat $file
                echo ""
              fi
            done
            
            # Create final summary
            echo "Creating final report..." > /tmp/workspace/final-report.txt
            echo "Files created across all jobs:" >> /tmp/workspace/final-report.txt
            ls -1 /tmp/workspace/*.txt | sed 's/.*\//- /' >> /tmp/workspace/final-report.txt
            echo "" >> /tmp/workspace/final-report.txt
            echo "Total files: $(ls -1 /tmp/workspace/*.txt | wc -l)" >> /tmp/workspace/final-report.txt
            echo "Completed at: $(date)" >> /tmp/workspace/final-report.txt
            
            echo "📄 Final report:"
            cat /tmp/workspace/final-report.txt
            
            echo "✅ Workspace demonstration complete!"
            
  setup:
    executor: continuation/default
    steps:
      - checkout
      - run:
          name: Generate dynamic configuration
          command: |
            # Create your generate-config script
            chmod +x .circleci/generate-config.sh
            ./.circleci/generate-config.sh > generated-config.yml
      - continuation/continue:
          configuration_path: generated-config.yml

workflows:
  setup-workflow:
    jobs:
      # setup
      - config-override-test:
          override-with: team-config/custom-test
      - path-filtering/filter:
          base-revision: main
          mapping: |
            .*\.py run-python-tests true
          config-path: .circleci/continue-test.yml
      # workspace demonstration. When using dynamic config, you can only have 1 workflow.
      - generate-data
      - process-data:
          requires:
            - generate-data
      - publish-results:
          requires:
            - process-data
  

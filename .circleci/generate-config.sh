#!/bin/bash

# Get branch name and changed files for decision making.
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
CHANGED_FILES=$(git diff --name-only HEAD~1 2>/dev/null || echo "")

echo "# Generated by dynamic configuration on branch: $BRANCH_NAME" >&2

# Start building the configuration with common elements
cat << 'EOF'
version: 2.1

parameters:
  image-tag:
    type: string
    default: "current"ha
  test-conditional:
    type: boolean
    default: true

executors:
  my-executor:
    docker:
      - image: cimg/base:<< pipeline.parameters.image-tag >>
    working_directory: /tmp

jobs:
  test:
    executor: my-executor
    steps:
      - run: echo "Testing..."  

  build-app1:
    executor: my-executor
    steps:
      - run: echo "Building App 1!"
      - run: echo "App 1 Build Artifacts" > app1
      - persist_to_workspace:
          root: .              
          paths:
            - app1

  build-app2:
    executor: my-executor
    steps:
      - run: echo "Building App 2!"
      - run: echo "App 2 Build Artifacts" > app2
      - persist_to_workspace:
          root: .              
          paths:
            - app2

  build-app3:
    executor: my-executor
    steps:
      - run: echo "Building App 3!"
      - run: echo "App 3 Build Artifacts" > app3
      - persist_to_workspace:
          root: .            
          paths:
            - app3

  push-and-deploy:
    executor: my-executor
    steps:
      - run: echo "Log in to Docker with this secret ${variable1}"
      - attach_workspace: 
          at: /tmp
      - run: cat /tmp/app1
      - run: cat /tmp/app2
      - run: cat /tmp/app3
      - run: echo "Pushing to Docker!"
      - run: echo "Login to AWS with secret ${variable1}"
      - run: echo "Deploy to AWS!"

  rollback:
    executor: my-executor
    steps:
      - run: echo "Rolling back!"

  quick-test:
    executor: my-executor
    steps:
      - run: echo "Quick test for feature branches"

workflows:
EOF

# Dynamic logic: Generate different workflows based on branch
if [[ "$BRANCH_NAME" == "main" ]]; then
  echo "  # Full production workflow for main branch" >&2
  cat << 'EOF'
  production-workflow:
    jobs:
      - test
      - build-app1:
          requires: [test]
      - build-app2:
          requires: [test]
      - build-app3:
          requires: [test]
      - push-and-deploy:
          context: [variable]
          requires: [build-app1, build-app2, build-app3]
          filters:
            branches:
              only: [main]
      - rollback:
          context: [variable]
          requires: [push-and-deploy]
          
  scheduled-workflow:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only: [main]
    jobs:
      - test
      - build-app1:
          requires: [test]
      - build-app2:
          requires: [test]
      - build-app3:
          requires: [test]
EOF

elif [[ "$BRANCH_NAME" == "dev" ]]; then
  echo "  # Development workflow - testing and conditional logic" >&2
  cat << 'EOF'
  dev-workflow:
    jobs:
      - test:
          filters:
            branches:
              only: [dev]
      - build-app1:
          requires: [test]
      - build-app2:
          requires: [test]
          
  test-conditional:
    when: << pipeline.parameters.test-conditional >>
    jobs:
      - test:
          filters:
            branches:
              only: [dev]
EOF

else
  echo "  # Feature branch workflow - quick validation only" >&2
  cat << 'EOF'
  feature-workflow:
    jobs:
      - quick-test
      - test:
          requires: [quick-test]
EOF

  # Check if specific files changed to determine what to build
  if echo "$CHANGED_FILES" | grep -q "app1/"; then
    echo "      - build-app1:"
    echo "          requires: [test]"
  fi
  
  if echo "$CHANGED_FILES" | grep -q "app2/"; then
    echo "      - build-app2:"
    echo "          requires: [test]"
  fi
  
  if echo "$CHANGED_FILES" | grep -q "app3/"; then
    echo "      - build-app3:"
    echo "          requires: [test]"
  fi
fi

echo "" >&2
echo "Configuration generated successfully!" >&2